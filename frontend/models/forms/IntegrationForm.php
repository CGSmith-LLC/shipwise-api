<?php

namespace frontend\models\forms;

use common\models\Integration;
use common\models\IntegrationMeta;


/**
 * @property Integration $integration
 * @property IntegrationMeta $metaData
 */
class IntegrationForm extends \common\models\forms\BaseForm
{


    public Integration $integration;

    /** @var array $metaData IntegrationMeta array */
    public array $metaData;

    public function init()
    {
        $this->integration = new Integration();
        $this->metaData[] = new IntegrationMeta();
        parent::init(); // TODO: Change the autogenerated stub
    }


    public function rules()
    {
        return [
            [['integration', 'metaData'], 'required'],
        ];
    }

    public function save()
    {
        $transaction = \Yii::$app->db->beginTransaction();

        if (!$this->integration->save()) {
            $transaction->rollBack();
            return false;
        }


        /**  @var $metaDatum IntegrationMeta */
        foreach ($this->metaData as $metaDatum) {
            $metaDatum->integration_id = $this->integration->id;
            if (!$metaDatum->save()) {
                $transaction->rollBack();
                return false;
            }

        }
        $transaction->commit();
        return true;
    }

    public function saveMeta()
    {
        $metaDatum = null;
        $keep = [];
        /**  @var $metaDatum IntegrationMeta */
        foreach ($this->metaData as $metaDatum) {
            $metaDatum->integration_id = $this->integration->id;
        }
        if (!$metaDatum->save(false)) {
            return false;
        }
        $keep[] = $metaDatum->id;
        $query = IntegrationMeta::find()->andWhere(['integration_id' => $this->integration->id]);
        if ($keep) {
            $query->andWhere(['not in', 'id', $keep]);
        }
        foreach ($query->all() as $metaDatum) {
            $metaDatum->delete();
        }

        return true;
    }

    /**
     * @return array
     */
    protected function getAllModels()
    {
        $models = [
            'Integration' => $this->integration,
        ];
        foreach ($this->metaData as $id => $metaDatum) {
            $models['IntegrationMeta.' . $id] = $this->metaData[$id];
        }

        return $models;
    }

}