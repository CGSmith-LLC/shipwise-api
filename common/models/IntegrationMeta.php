<?php


namespace common\models;


use yii\db\Exception;

class IntegrationMeta extends base\BaseIntegrationMeta
{
    /**
     * @throws Exception
     */
    public static function addMeta($key, $value, $id)
    {
        $transaction = \Yii::$app->db->beginTransaction();

        $newvalue = base64_encode(\Yii::$app->getSecurity()->encryptByKey(data: $value, inputKey: \Yii::$app->params['encryptionKey']));

        $newMeta = (new IntegrationMeta(['key' => $key, 'value' => $newvalue, 'created_date' => date(format:'Y-m-d H:i:s'), 'integration_id' => $id]));

        if ($newMeta->save(runValidation: true)) {
            $transaction->commit();
        } else {
            $transaction->rollBack();
            throw new Exception(message: 'New metadatum could not be saved.');
        }
    }

    public static function getMeta($integration_id)
    {
        $metaDatums = IntegrationMeta::find()->where(['integration_id' => $integration_id])->all();
        $returnMetaData = []; // init array

        foreach ($metaDatums as $metaDatum) {
            $returnMetaData[$metaDatum->getAttribute('key')] = \Yii::$app->getSecurity()->decryptByKey(base64_decode($metaDatum->getAttribute('value')), \Yii::$app->params['encryptionKey']);
        }

        return $returnMetaData;
    }

    public function beforeSave($insert)
    {
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    /**
     * Returns decrypted value of model
     *
     * @return string
     */
    public function decryptedValue(): string
    {
        return \Yii::$app->getSecurity()->decryptByKey(base64_decode($this->value), \Yii::$app->params['encryptionKey']);
    }
}